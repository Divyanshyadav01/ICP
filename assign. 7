// 1. House Robber (198)
class Solution1{
    public int rob(int[] nums){
        if(nums.length==0)return 0;
        if(nums.length==1)return nums[0];
        int prev2=0,prev1=nums[0];
        for(int i=1;i<nums.length;i++){
            int pick=nums[i]+prev2;
            int notPick=prev1;
            int curr=Math.max(pick,notPick);
            prev2=prev1;
            prev1=curr;
        }
        return prev1;
    }
}
// Time: O(n), Space: O(1)

// 2. Maximum Subarray (53)
class Solution2{
    public int maxSubArray(int[] nums){
        int maxSum=nums[0],currSum=nums[0];
        for(int i=1;i<nums.length;i++){
            currSum=Math.max(nums[i],currSum+nums[i]);
            maxSum=Math.max(maxSum,currSum);
        }
        return maxSum;
    }
}
// Time: O(n), Space: O(1)

// 3. Unique Paths (62)
class Solution3{
    public int uniquePaths(int m,int n){
        int[][] dp=new int[m][n];
        for(int i=0;i<m;i++)dp[i][0]=1;
        for(int j=0;j<n;j++)dp[0][j]=1;
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }
}
// Time: O(m*n), Space: O(m*n)
