// 1. Min Stack (155)
class MinStack{
    private Stack<Integer> stack;
    private Stack<Integer> minStack;
    public MinStack(){
        stack=new Stack<>();
        minStack=new Stack<>();
    }
    public void push(int val){
        stack.push(val);
        if(minStack.isEmpty()||val<=minStack.peek())minStack.push(val);
    }
    public void pop(){
        if(stack.pop().equals(minStack.peek()))minStack.pop();
    }
    public int top(){
        return stack.peek();
    }
    public int getMin(){
        return minStack.peek();
    }
}
// Time: O(1) for all ops, Space: O(n)

// 2. Implement Stack using Queues (225)
class MyStack{
    Queue<Integer> q=new LinkedList<>();
    public void push(int x){
        q.add(x);
        for(int i=0;i<q.size()-1;i++)q.add(q.remove());
    }
    public int pop(){
        return q.remove();
    }
    public int top(){
        return q.peek();
    }
    public boolean empty(){
        return q.isEmpty();
    }
}
// Time: O(n) for push, O(1) for others, Space: O(n)

// 3. Remove K Digits (402)
class Solution3{
    public String removeKdigits(String num,int k){
        Stack<Character> st=new Stack<>();
        for(char c:num.toCharArray()){
            while(!st.isEmpty()&&k>0&&st.peek()>c){
                st.pop();k--;
            }
            st.push(c);
        }
        while(k>0&&!st.isEmpty()){st.pop();k--;}
        StringBuilder sb=new StringBuilder();
        for(char c:st)sb.append(c);
        while(sb.length()>0&&sb.charAt(0)=='0')sb.deleteCharAt(0);
        return sb.length()==0?"0":sb.toString();
    }
}
// Time: O(n), Space: O(n)
// Test: num="1432219",k=3 → "1219"

// 4. Asteroid Collision (735)
class Solution4{
    public int[] asteroidCollision(int[] asteroids){
        Stack<Integer> st=new Stack<>();
        for(int a:asteroids){
            while(!st.isEmpty()&&a<0&&st.peek()>0){
                int diff=a+st.peek();
                if(diff<0)st.pop();
                else if(diff>0)a=0;
                else{st.pop();a=0;}
            }
            if(a!=0)st.push(a);
        }
        int[] res=new int[st.size()];
        for(int i=res.length-1;i>=0;i--)res[i]=st.pop();
        return res;
    }
}
// Time: O(n), Space: O(n)
// Test: [5,10,-5] → [5,10]

// 5. Basic Calculator II (227)
class Solution5{
    public int calculate(String s){
        Stack<Integer> st=new Stack<>();
        int num=0;char op='+';
        for(int i=0;i<s.length();i++){
            char c=s.charAt(i);
            if(Character.isDigit(c))num=num*10+(c-'0');
            if((!Character.isDigit(c)&&c!=' ')||i==s.length()-1){
                if(op=='+')st.push(num);
                else if(op=='-')st.push(-num);
                else if(op=='*')st.push(st.pop()*num);
                else if(op=='/')st.push(st.pop()/num);
                op=c;num=0;
            }
        }
        int res=0;
        while(!st.isEmpty())res+=st.pop();
        return res;
    }
}
// Time: O(n), Space: O(n)
// Test: "3+2*2" → 7

// 6. Car Fleet (853)
class Solution6{
    public int carFleet(int target,int[] position,int[] speed){
        int n=position.length;
        double[][] cars=new double[n][2];
        for(int i=0;i<n;i++){
            cars[i][0]=position[i];
            cars[i][1]=(double)(target-position[i])/speed[i];
        }
        Arrays.sort(cars,(a,b)->Double.compare(a[0],b[0]));
        Stack<Double> st=new Stack<>();
        for(int i=n-1;i>=0;i--){
            double time=cars[i][1];
            if(st.isEmpty()||time>st.peek())st.push(time);
        }
        return st.size();
    }
}
// Time: O(n log n), Space: O(n)
// Test: target=12,pos=[10,8,0,5,3],speed=[2,4,1,1,3] → 3

