// 1. Minimum Number of Arrows to Burst Balloons (452)
class Solution1{
    public int findMinArrowShots(int[][] points){
        if(points.length==0)return 0;
        Arrays.sort(points,(a,b)->Integer.compare(a[1],b[1]));
        int arrows=1;int end=points[0][1];
        for(int i=1;i<points.length;i++){
            if(points[i][0]>end){
                arrows++;
                end=points[i][1];
            }
        }
        return arrows;
    }
}
// Time: O(n log n), Space: O(1)

// 2. Non-overlapping Intervals (435)
class Solution2{
    public int eraseOverlapIntervals(int[][] intervals){
        if(intervals.length==0)return 0;
        Arrays.sort(intervals,(a,b)->Integer.compare(a[1],b[1]));
        int count=0;int end=intervals[0][1];
        for(int i=1;i<intervals.length;i++){
            if(intervals[i][0]<end)count++;
            else end=intervals[i][1];
        }
        return count;
    }
}
// Time: O(n log n), Space: O(1)

// 3. Queue Reconstruction by Height (406)
class Solution3{
    public int[][] reconstructQueue(int[][] people){
        Arrays.sort(people,(a,b)->a[0]==b[0]?a[1]-b[1]:b[0]-a[0]);
        List<int[]> res=new ArrayList<>();
        for(int[]p:people)res.add(p[1],p);
        return res.toArray(new int[people.length][]);
    }
}
// Time: O(n^2), Space: O(n)

// 4. Lemonade Change (860)
class Solution4{
    public boolean lemonadeChange(int[] bills){
        int five=0,ten=0;
        for(int bill:bills){
            if(bill==5)five++;
            else if(bill==10){
                if(five==0)return false;
                five--;ten++;
            }else{
                if(ten>0&&five>0){ten--;five--;}
                else if(five>=3)five-=3;
                else return false;
            }
        }
        return true;
    }
}
// Time: O(n), Space: O(1)

// 5. Boats to Save People (881)
class Solution5{
    public int numRescueBoats(int[] people,int limit){
        Arrays.sort(people);
        int i=0,j=people.length-1,boats=0;
        while(i<=j){
            if(people[i]+people[j]<=limit)i++;
            j--;boats++;
        }
        return boats;
    }
}
// Time: O(n log n), Space: O(1)
