// 1. Remove Duplicates from Sorted List (83)
class Solution1{
    public ListNode deleteDuplicates(ListNode head){
        ListNode curr=head;
        while(curr!=null&&curr.next!=null){
            if(curr.val==curr.next.val)curr.next=curr.next.next;
            else curr=curr.next;
        }
        return head;
    }
}
// Time: O(n), Space: O(1)
// Test Cases:
// [1,1,2] → [1,2]
// [1,1,2,3,3] → [1,2,3]

// 2. Palindrome Linked List (234)
class Solution2{
    public boolean isPalindrome(ListNode head){
        if(head==null||head.next==null)return true;
        ListNode slow=head,fast=head;
        while(fast!=null&&fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        ListNode prev=null,curr=slow,next=null;
        while(curr!=null){
            next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
        }
        ListNode first=head,second=prev;
        while(second!=null){
            if(first.val!=second.val)return false;
            first=first.next;
            second=second.next;
        }
        return true;
    }
}
// Time: O(n), Space: O(1)
// Test Cases:
// [1,2,2,1] → true
// [1,2] → false

// 3. Reorder List (143)
class Solution3{
    public void reorderList(ListNode head){
        if(head==null||head.next==null)return;
        ListNode slow=head,fast=head;
        while(fast!=null&&fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        ListNode prev=null,curr=slow.next;
        slow.next=null;
        while(curr!=null){
            ListNode next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
        }
        ListNode first=head,second=prev;
        while(second!=null){
            ListNode tmp1=first.next,tmp2=second.next;
            first.next=second;
            second.next=tmp1;
            first=tmp1;
            second=tmp2;
        }
    }
}
// Time: O(n), Space: O(1)
// Test Cases:
// [1,2,3,4] → [1,4,2,3]
// [1,2,3,4,5] → [1,5,2,4,3]

// Definition for singly-linked list:
class ListNode{
    int val;
    ListNode next;
    ListNode(int x){val=x;}
}
